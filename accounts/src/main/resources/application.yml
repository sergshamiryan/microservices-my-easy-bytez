server:
  port: 8080
  error:
    include-message: always
    include-binding-errors: always

spring:
  application:
    name: "accounts"
  profiles:
    active: "prod"
  datasource:
    #    url: jdbc:h2:mem:testDb
    url: jdbc:mysql://localhost:3310/accountsdb
    #    driver-class-name: org.h2.Driver
    username: root
    password: root
  #  h2:
  #    console:
  #      enabled: true
  jpa:
    show-sql: true
    hibernate:
      ddl-auto: update
  sql:
    init:
      mode: always
  config:
    import: "optional:configserver:http://localhost:8071/"
  cloud:
    openfeign:
      circuitBreaker:
        enabled: true
    function:
      definition: updateCommunication
    stream:
      bindings:
        #Using input binding we can read from the queue
        updateCommunication-in-0:
          destination: communication-sent
          group: ${spring.application.name}
        sendCommunication-out-0:
          destination: send-communication

  rabbitmq:
    host: localhost
    port: 5672
    username: guest
    password: guest
    connection-timeout: 10s

management:
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    shutdown:
      enabled: true
  info:
    env:
      enabled: true

eureka:
  instance:
    # By Default it will register via hostname, but it will make sense when we
    # want to use DNS mappings, but inside our local system we don't have any DNS
    # mapping set up, we should use preferIpAddress as true
    preferIpAddress: true
  client:
    # True to be sure that service fetch the registry details whenever trying
    # to connect with other microservices
    fetchRegistry: true
    # To allow our account service to register itself in eureka server
    registerWithEureka: true
    serviceUrl:
      defaultZone: http://localhost:8070/eureka/

info:
  app:
    name: "accounts"
    description: "Sergshamiryan Bank accounts Application"
    version: "1.0.0"

resilience4j.circuitbreaker:
  configs:
    default:
      slidingWindow: 10
      permittedNumberOfCallsInHalfOpenState: 2
      failureRateThreshold: 50
      waitDurationInOpenState: 10000

resilience4j.retry:
  configs:
    default:
      maxRetryAttempts: 3
      waitDuration: 100
      enableExponentialBackoff: true
      exponentBackoffMultiplier: 2
      ignoreExceptions:
        - java.lang.NullPointerException
      retryExceptions:
        - java.util.concurrent.TimeoutException #All exceptions will be ignored but timeoutException

resilience4j.rateLimiter:
  configs:
    default:
      #maximum time a thread is willing to wait for permission to proceed through
      #the rate-limited section of code.
      #If the waiting time exceeds this duration, the thread will give up,
      #and the rate-limited request will be handled based on your defined policies.
      timeoutDuration: 1000
      limitRefreshPeriod: 5000 #For every 5 seconds renew the quota
      limitForPeriod: 100 #For every 5 seconds 100 requests is allowed