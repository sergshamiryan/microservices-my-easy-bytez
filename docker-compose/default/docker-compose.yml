services:

  kafka:
    image: docker.io/bitnami/kafka:3.5
    ports:
      - "9092:9092" 
    volumes:
      - "kafka_data:/bitnami"
    environment:
      # KRaft settings
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      # Listeners
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
    extends:
      file: common-config.yml
      service: network-deploy-service

  rabbit:
    image: rabbitmq:3.12-management
    hostname: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: rabbitmq-diagnostics check_port_connectivity
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 5s
    extends:
      file: common-config.yml
      service: network-deploy-service

  redis:
    image: redis
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD-SHELL","redis-cli ping | grep PONG"]
      timeout: 10s
      retries: 10
    extends:
      file: common-config.yml
      service: network-deploy-service

  keycloak-mysql:
    container_name: keycloak-mysql
    image: mysql:5.7
    volumes:
      - ./mysql_keycloak_data:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: keycloak
      MYSQL_USER: admin
      MYSQL_PASSWORD: admin

  keycloak:
    container_name: keycloak
    image: quay.io/keycloak/keycloak:23.0.5
    command: [ "start-dev", "--import-realm" ]
    environment:
      DB_VENDOR: MYSQL
      DB_ADDR: mysql
      DB_DATABASE: keycloak
      DB_USER: admin
      DB_PASSWORD: admin
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    ports:
      - "7080:8080"
    volumes:
      - ./realms/:/opt/keycloak/data/import/
    depends_on:
      - keycloak-mysql
    extends:
      file: common-config.yml
      service: network-deploy-service

  accountsdb:
    container_name: accountsdb
    ports:
      - 3310:3306
    environment:
      MYSQL_DATABASE: accountsdb
    extends:
      file: common-config.yml
      service: microservice-db-config

  cardsdb:
    container_name: cardsdb
    ports:
      - 3308:3306
    environment:
      MYSQL_DATABASE: cardsdb
    extends:
      file: common-config.yml
      service: microservice-db-config

  loansdb:
    container_name: loansdb
    ports:
      - 3307:3306
    environment:
      MYSQL_DATABASE: loansdb
    extends:
      file: common-config.yml
      service: microservice-db-config

  message:
    image: "sergshamriyan/message:latest"
    container_name: message-ms
    environment:
      SPRING_CLOUD_STREAM_KAFKA_BINDER_BROKERS: "kafka:9092"
    extends:
      file: common-config.yml
      service: network-deploy-service

  accounts:
    image: "sergshamriyan/accounts:latest"
    container_name: "accounts-ms"
    ports:
      - "8080:8080"
    environment:
      SPRING_APPLICATION_NAME: "accounts"
      #need to be 3306, because this is internal docker network
      #communication within docker containers
      SPRING_DATASOURCE_URL: "jdbc:mysql://accountsdb:3306/accountsdb"
      SPRING_CLOUD_STREAM_KAFKA_BINDER_BROKERS: "kafka:9092"
    depends_on:
      configserver:
        condition: service_healthy
      eurekaserver:
        condition: service_healthy
      accountsdb:
        condition: service_healthy
    extends:
      file: common-config.yml
      service: microservice-configserver-config

  loans:
    image: "sergshamriyan/loans:latest"
    container_name: "loans-ms"
    ports:
      - "8090:8090"
    environment:
      SPRING_APPLICATION_NAME: loans
      SPRING_PROFILES_ACTIVE: default
      #need to be 3306, because this is internal docker network
      #communication within docker containers
      SPRING_DATASOURCE_URL: "jdbc:mysql://loansdb:3306/loansdb"
    depends_on:
      loansdb:
        condition: service_healthy
      eurekaserver:
        condition: service_healthy
    extends:
      file: common-config.yml
      service: microservice-base-config

  cards:
    image: "sergshamriyan/cards:latest"
    container_name: "cards-ms"
    ports:
      - "9000:9000"
    environment:
      SPRING_APPLICATION_NAME: cards
      SPRING_PROFILES_ACTIVE: default
      #need to be 3306, because this is internal docker network
      #communication within docker containers
      SPRING_DATASOURCE_URL: "jdbc:mysql://cardsdb:3306/cardsdb"
    depends_on:
      loansdb:
        condition: service_healthy
      eurekaserver:
        condition: service_healthy
    extends:
      file: common-config.yml
      service: microservice-base-config

  configserver:
    image: "sergshamriyan/configserver:latest"
    container_name: "configserver-ms"
    ports:
      - 8071:8071
    #    depends_on:
    #      rabbit:
    #        condition: service_healthy
    healthcheck:
      test: "curl --fail --silent localhost:8071/actuator/health/readiness | grep UP || exit 1"
      interval: 10s #With timeout of 10 sec
      timeout: 5s #Inside each check don`t wait more than 5 sec
      retries: 10 #Retry 10 times
      start_period: 10s #After 10 sec
    extends:
      file: common-config.yml
      service: microservice-base-config

  eurekaserver:
    image: "sergshamriyan/eurekaserver:latest"
    container_name: "eurekaserver-ms"
    ports:
      - "8070:8070"
    healthcheck:
      test: "curl --fail --silent localhost:8070/actuator/health/readiness | grep UP || exit 1"
      interval: 10s #With timeout of 10 sec
      timeout: 5s #Inside each check don`t wait more than 5 sec
      retries: 10 #Retry 10 times
      start_period: 10s #After 10 sec
    extends:
      file: common-config.yml
      service: microservice-nonDb-base-config
    environment:
      SPRING_PROFILES_ACTIVE: default
      SPRING_APPLICATION_NAME: "eurekaserver"

  gatewayserver:
    image: "sergshamriyan/gatewayserver:latest"
    container_name: "gatewayserver-ms"
    ports:
      - "8072:8072"
    healthcheck:
      test: "curl --fail --silent localhost:8072/actuator/health/readiness | grep UP || exit 1"
      interval: 10s #With timeout of 10 sec
      timeout: 5s #Inside each check don`t wait more than 5 sec
      retries: 10 #Retry 10 times
      start_period: 10s #After 10 sec
    depends_on:
      accounts:
        condition: service_healthy
      cards:
        condition: service_healthy
      loans:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      SPRING_PROFILES_ACTIVE: default
      SPRING_APPLICATION_NAME: "gatewayserver"
      SPRING_DATA_REDIS_CONNECT-TIMEOUT: 2S
      SPRING_DATA_REDIS_HOST: redis
      SPRING_DATA_REDIS_PORT: 6379
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_JWK-SET-URI: http://keycloak:8080/realms/master/protocol/openid-connect/certs
    extends:
      file: common-config.yml
      service: microservice-nonDb-base-config-with-eureka

volumes:
  kafka_data:
    driver: local

networks:
  sergshamiryan:
    driver: "bridge"